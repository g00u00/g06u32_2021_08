import matplotlib.pyplot as plt
;
import matplotlib.pyplot as plt
import numpy as np
help(numpy)
help(np)
p.array([(1.5,2,3), (4,5,6)])q
b = np.array([(1.5,2,3), (4,5,6)])b = np.array([(1.5,2,3), (4,5,6)])
exit
host="g02u60.nn2000.info"
type host
host.type
host.__dir__()
host_py(str)
help(str)
str(jkhlk)
string(jkhlk)
host
host_py.__add__(host)
host_py=""
host_py.__add__(host)
host_p
host_py
host_py="href="http://"
host_py='href="http://' host_py='href="http://'
host_py
host_py=host_py.__add__(host)
host_py
host_py='href="http://'
host_py=host_py.__add__(host,/cgi-bin/py_sql_pages.py)
host_py=host_py.__add__(host,"/cgi-bin/py_sql_pages.py")
host_py=host_py.__add__(host,'/cgi-bin/py_sql_pages.py')
host_py.__add__(host)
g="jkhkj"
g.join("dasfgdsa","sadfs","sdf2")
help(join)
help(g)
help(str)
g1.join("dasfgdsa","sadfs","sdf2")
g.join("dasfgdsa","sadfs","sdf2")
g=''
g.join("dasfgdsa","sadfs","sdf2")
g
s=' '
g.join("dasfgdsa","sadfs","sdf2")
seq = ("a", "b", "c")
seg
print(seg)
seq
help(__add__)
help(__add__())
import numpy as np
matplotlib.use('Agg')
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import matplotlib
matplotlib.use('Agg')
plt.
help (plt.scatter)
help(plt.grid)
h="jkhkj"
h.help(plt.grid)
help(plt.grid)
help(plt.Text)
help(plt.grid)
from pylab import *
n = 1024
024
>>>
024
>>>
X = np.random.normal(0,1,n)
X
Y = np.random.normal(0,1,n)
T = np.arctan2(Y,X)
T
scatter(X,Y,s=75,c=T,alpha=.5)
scatter(X,Y,alpha=.5)
plot.scatter(X,Y,alpha=.5)
import matplotlib.pyplot as plt
plt.scatter(X,Y,alpha=.5)
plt.scatter(X,Y)
xlim(-1.5,1.5), xticks([])
x=["1","2","5"]
x
type(x)
help(list)
y="1"
string="fkjasdjflk. kfkdsl;fkl;sda. sd;lfk"
string
string.split()
s=string.split()
s
string.replace('. ', '.')
string
string.__contains__("sda")
string.__contains__("sda1")
string.__contains__("sda")
string.__add__("1")
x="qqqqqwer"
x
x.x.__add__("22")
x.__add__("22")
x
x=x.__add__("22")
x
exit
x
x="kjhkj"
l-list()
l=list()
l=l.__add__(x)
l.__add__(x)
x
l.extend(x)
l
l.append(x)
l
help(list)
l.append(x)
help(print)
help(write)
help("write")
l
if (l.__contains__("j"))
if (l.__contains__("j")):
help(print)
s="jhkjhkj"
s.join(s)
s
s.join()
s.join(" ",s," ")
help(str)
help(print)
def py_sql_visits(page_id, page_title, page_keywords):
    print(type(page_id), type(page_title), type(page_keywords),page_id, page_title, page_keywords)
    print(page_id, page_title, page_keywords)
page_id=1
py_sql_visits(1,"2","3")
def py_sql_visits(page_id, page_title, page_keywords):
     print(page_id, page_title, page_keywords)
py_sql_visits(1,"2","3")
help(if)
help()
if
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
print("""\
Usage: thingy [OPTIONS]
\Usage: thingy [OPTIONS]
   \Usage: thingy [OPTIONS]
""")
print("""\
   Usage: thingy [OPTIONS]
""")
 word[4:42]
word[4:42]
word[3:42]
word[3:]
"word"[3:]
"word"[4:]
"word"[5:42]
"word"[:42]
"word"[:2]
"word"[:-2]
"word"[:3]
"word"[:-3]
s="123"
 s.isdigit()
s.isdigit()
s.islower()
s.join("jhkjl")
s.join("l")
s.join("ll")
s.join("l")
s.title()
s
my="ryrytryt"
my.
my.title()
my.istitle()
my=my.title()
my.istitle()
help()
print
tuple
q
stream = open('../tmp/file_pav_02.txt', mode='r', encoding="utf-8")
stream.read()
stream.close()
stream = open('../tmp/file_pav_02.txt', mode='r', encoding=None)
stream.read()
stream.close()
stream = open('../tmp/file_pav_02.txt', mode='r', encoding=None, newline="\n")
stream.read()
stream = open('../tmp/file_pav_02.txt', mode='r', encoding="utf-8")
stream.readline()
stream.close()
stream= open('../tmp/file_pav_02.txt', mode='r', encoding="utf-8")
all=stream.read()
all.replace('\n', '')
all_01=all.replace('\n', '')
all
all_01
all=all.replace('\n', '')
all
all=all.replace('. ', '.')
all
for char in all:
    print (char)
for char in all:
type(sentence)
sentence.__add__("q")
sentence.__add__("qf")
for char in all:
    if(char != '.'):
        sentence.__add__(char)
sentence
for char in all:
    if(char != '.'):
        sentece=sentence.__add__(char)
    print (sentece)
for char in all:
    if(char != '.'):
        sentence=sentence.__add__(char)
    else:
        print(sentence)
        sentence=''
sentence=list()
sentence=str()
sentences=list()
i_sent=0
i_sent++
i_sent+
i_sent
i_sent+=1
i_sent
i_sent+=5
i_sent
i_sent=0
for char in all:
    if(char != '.'):
        sentence=sentence.__add__(char)
     else:
for char in all:
>>> for char in all:
...     if(char != '.'):
...         sentence=sentence.__add__(char)
...     else:
for i in range(5):
    print (i)
for i in range(5):
    print (i, random.randrange(0, 101, 2))
import random
for i in range(5):
    print (i, random.randrange(0, 101, 2))
for i in range(5):
    print (i, random.randrange(-100, 101, 2))
int_val=list()
for i in range(5):
    int_val[i]=int(random.randrange(-100, 101, 2))
    print (i, random.randrange(-100, 101, 2))
print (int_val)
for i in range(5):
    int_val[i]=int(random.randrange(-100, 101, 2))
for i in range(5):
    int_val[i]=random.randrange(-100, 101, 2)
for int i in range(5):
for int(i) in range(5):
    int_val.=random.randrange(-100, 101, 2)
int_val.__add__(1)
int_val.insert(2)
int_val.insert(0,5)
int_val
int_val.append(11)
int_val
int_val.extend(3)
import time, datetime
datetime.datetime.now()
type(datetime.datetime.now())
datetime.datetime.date()
datetime.datetime.date(now)
datetime.datetime.date.now
datetime.datetime.date(1)
datetime.datetime.date("30")
datetime.datetime.date(30)
datetime.datetime.now()
datetime.datetime.now().time
datetime.datetime.time([now])
datetime.datetime.today()
datetime.datetime.tzinfo()
datetime.datetime.tzinfo("")
datetime.datetime.weekday()
y=datetime.datetime.weekday()
datetime.datetime.weekday(3)
datetime.datetime.weekday("mondey")
datetime.datetime.
datetime.datetime.datetime.datetime.day
datetime.datetime.day()
datetime.datetime.now()
datetime_now = str(datetime.datetime.now()).split(' ')
datetime_now
datetime_now = str(datetime.datetime.now()).split(',')
datetime_now
datetime_now = str(datetime.datetime.now())
datetime_now
import json
data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
print('DATA:', repr(data))
print(data)
data
data_string = json.dumps(data)
print('JSON:', data_string)
import json
data = [{'a': 'A', 'b': (2, 4), 'c': 3.0}]
print('DATA:', repr(data))
plain_dump = json.dumps(data)
print('dumps(data)            :', len(plain_dump))
small_indent = json.dumps(data, indent=2)
print('dumps(data, indent=2)  :', len(small_indent))
a=["a","2"]
b=["as","2s"]
a.
a.__add__(b)
a=a.__add__(b)
a
a=a.__add__(b)
a
a.clearq
help()
range
import requests
requests.session(get('http://g06u32.nn2000.info/', cookies=payload))
requests.session(post('http://g06u32.nn2000.info/', cookies=payload))
requests.session
requests.session.
requests.session
requests.session()
import requests
url = 'http://g06u32.nn2000.info/cgi-bin'
headers1 = {'user-agent': 'your-own-user-agent/0.0.1'}
cookies1 = {'visit-month': 'February'}
req = requests.get(url, headers=headers1, cookies=cookies1)
reg
requests.get(url, headers=headers1, cookies=cookies1)
requests.get(url)
req = requests.get(url, headers=headers1, cookies=cookies1)
req.url
 req.cookies
req.cookies
req.headers
req.content
req.raw
url = 'http://g06u32.nn2000.info/tmp'
req = requests.get(url, headers=headers1, cookies=cookies1)
req.url
req.text
req.ok
req.links
req.headers
req.cookies
req.connection
req.__dict__
url = 'http://g06u32.nn2000.info/tmp/cookies'
headers1 = {'user-agent': 'your-own-user-agent/0.0.1'}
cookies1 = {'visit-month': 'February'}
req = requests.get(url, headers=headers1, cookies=cookies1)
print(req.txt)
print(req.url)
r2.requests.get(https://google.com')
r2.requests.get('https://google.com')
r2 = requests.get('https://google.com')
print(r2.cookies)
print(r2.cookies[1P JAR])
print(r2.cookies[1P_JAR])
print(r2.cookies[1P_JAP])
print(r2.cookies[NID])
print(r2.cookies['NID'])
print(r1)
print(r)
print(req)
print(req.url)
print(req.cookies)
cookies1 = {'visit-month': 'February'}
requestsJar = requests.cookies.RequestsCoocieJar()
requestsJar = requests.cookies.RequestsCookieJar()
requestsJar.set("wqeqw","sfsdaf")
requestsJar.set("n1","v2")
requestsJar = requests.cookies.RequestsCookieJar()requestsJar = requests.cookies.RequestsCookieJar()
requestsJar.set("n1","v2") requestsJar.set("n1","v2")
req = requests.get(url, headers=headers1, cookies=cookies1)clear
requestsJar.set("n1","v2") requestsJar.set("n1","v2")
requestsJar.set("n1","v2")
requestsJar._cookies
requestsJar.set("user1","user2", name1="abc1", name2="abc2")
requestsJar.set("user10","user20", name1="abc1", name2="abc2")
requestsJar.set("user10","user20", domain="abc1", path="abc2")
requestsJar
req = requests.get(url, requestsJar)
req4 = requests.get(url, cookies-requestsJar)
cookies
cookies = {'dfzds','dsaffd'}
req4 = requests.get(url, cookies-requestsJar)
requestsJar.set("user10","user20", domain="abc1", path="abc2")
req4 = requests.get(url, cookies-requestsJar)
requestsJar.set("user10","user20", domain="abc1", path="abc2")
requests.get(url,requests.get(url,
cookies)
q
requests.get(
q
cookies = {'visit-month': 'February'}
requestsJar = requests.cookies.RequestsCookieJar()
req = requests.get(url, cookies)
requests.get(url, cookies)
requests.get(url)
requests.post(url, cookies)
req = requests.get(url)
reg
reg.cookies
req = requests.get(url)
print req
print (req)
print (req.cookies)
 print (req.cookies)
requests.post(url, requestsJar)
req = requests.get(url)
print (req.cookies)
req = requests.post(url, crequestsJar)
req = requests.post(url, cookies-requestsJar)
req = requests.post(url, requestsJar)
print(req.cookies)
url = 'http://g06u32.nn2000.info/tmp'
req = requests.post(url, requestsJar)
print(req.cookies)
req = requests.post(url, data= requestsJar)
print(req.cookies)
requestsJar
print(req.cookies)
cookies
req = requests.post(url, data= cokies)
req = requests.post(url, data= cookies)
print(req.cookies)
print(req.data)
req = requests.post(url, cookies= cookies)
print(req.cookies)
req = requests.post(url, RequestsCookieJar= cookies)
req = requests.post(url, requestsJar= cookies)
req = requests.post(url, data=[('key', 'value')])
req.url
req.text
req.content
req.data
req.raw
req.headers
req = requests.post(url, json={'key':'value'})
req = requests.post(url, {'key':'value'})
req
req.
req.json()
req = requests.post(url, cokies={'key':'value'})
response = requests.get('https://api.github.com')
response.content
response.text
response.json()
response = requests.get('http://nn2000.info')
response.json()
response = requests.get('http://ed.nn2000.info')
response.json()
response
response.cookies
 response.request
response.request
response.json()
response.__dict__
response.headers
response.headers['Content-Type']
import requests
response = requests.get(
    'https://api.github.com/search/repositories',
    params={'q': 'requests+language:python'},
    headers={'Accept': 'application/vnd.github.v3.text-match+json'},
    params={'q': 'requests+language:python'},
q
response = requests.get(
    'ed.nn2000.info',
    params={'q': 'requests+language:python'},
    headers={'Accept': 'application/vnd.github.v3.text-match+json'},
)
response = requests.get(
    'http://ed.nn2000.info',
    params={'q': 'requests+language:python'},
    headers={'Accept': 'application/vnd.github.v3.text-match+json'},
)
json_response = response.json()
response.headers
response.param
response.headers
import json
parameters_dictionary = {'x':1, 'y':2}
parameters_dictionary
json.dumps(parameters_dictionary)
y = json.dumps(parameters_dictionary)
y
x = ('baz', None, 1.0, 2)
type(x)
x = ['baz', None, 1.0, 2)]
x = ['baz', None, 1.0, 2]
type(x)
x = {'bar': ('baz', None, 1.0, 2)}
type(x)
x = ['foo', {'bar': ('baz', None, 1.0, 2)}]
type(x)
x = json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
x
from io import StringIO
io = StringIO()
